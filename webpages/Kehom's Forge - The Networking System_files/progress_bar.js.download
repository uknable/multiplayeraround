/// Progress bar object - handles creation and events
class progressBar {
   constructor() {
      this._divContainer;       // container holding the span element
      this._spanElement;        // the element that will be manipulated to showcase the "bar"

      this._eventPayload;       // events will receive this as extra argument

      this._p = 0;              // current percent value

      this._onBarDrag = { func: null, payload: null};
      this._onDragEnd = { func: null, payload: null};

      this.onDrag = function(event) {
         const prog = event.data.prog;
         const container = prog.getContainer();
         const px = container.offset().left;
         const click_location = event.pageX - px;

         const prog_width = container.width();
         var percent = Math.min(Math.max(click_location / prog_width, 0), 1.0);

         prog.setPercent(percent);

         if (prog._onBarDrag.func) {
            prog._onBarDrag.func(prog._p, prog._onBarDrag.payload);
         }
      }

      this.onMouseUp = function(event) {
         const prog = event.data.prog;
         $(document).unbind('mousemove', prog.onDrag);
         $(document).unbind('mouseup', prog.onMouseUp);

         if (prog._onDragEnd.func) {
            prog._onDragEnd.func(prog._p, prog._onDragEnd.payload);
         }
      }

      this.onMouseDown = function(event) {
         const relay = {
            prog: event.data.prog,
         }

         $(document).on('mousemove', relay, event.data.prog.onDrag);
         event.data.prog.onDrag({data: relay, pageX: event.pageX});
         $(document).on('mouseup', relay, event.data.prog.onMouseUp);
      }
   }


   createBar(extraStyle) {
      this._divContainer = $(`<div class="progress-bar" style="${extraStyle}"><span style="width: 0%"></span></div>`);
      this._spanElement = this._divContainer.children('span');
      this._p = 0;
      this._divContainer.on('mousedown', {prog: this}, this.onMouseDown);
   }
   
   createFromExisting(element) {
      this._divContainer = element;
      this._spanElement = element.children('span');
      this._p = this._spanElement.css('width');
      this._divContainer.on('mousedown', {prog: this}, this.onMouseDown);
   }

   setPercent(percent) {
      if (this._spanElement) {
         this._spanElement.css('width', `${percent * 100}%`);
         this._p = percent;
      }
   }

   getPercent() {
      return this._p;
   }

   getContainer() {
      return this._divContainer;
   }

   onBarDrag(func, payload) {
      if (typeof func === 'function') {
         this._onBarDrag.func = func;
         this._onBarDrag.payload = payload;
      }
   }

   onDragEnd(func, payload) {
      if (typeof func === 'function') {
         this._onDragEnd.func = func;
         this._onDragEnd.payload = payload;
      }
   }
}
